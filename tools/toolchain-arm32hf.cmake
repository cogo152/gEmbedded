SET(CMAKE_HOST_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_PROCESSOR arm)
SET(CMAKE_CROSSCOMPILING TRUE)

if (NOT DEFINED TARGET_ABI)
    set(TARGET_ABI "linux-gnueabihf")
endif ()

SET(CMAKE_C_COMPILER   arm-${TARGET_ABI}-gcc)
SET(CMAKE_CXX_COMPILER arm-${TARGET_ABI}-g++)

SET(CMAKE_FIND_ROOT_PATH "/usr/arm-${TARGET_ABI}")
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

find_program(GCC_FULL_PATH arm-${TARGET_ABI}-gcc)
if (NOT GCC_FULL_PATH)
    message(FATAL_ERROR "Cross-compiler arm-${TARGET_ABI}-gcc not found")
endif ()
get_filename_component(GCC_DIR ${GCC_FULL_PATH} PATH)

SET(CMAKE_CPP           ${GCC_DIR}/arm-${TARGET_ABI}-cpp        CACHE FILEPATH "cpp")
SET(CMAKE_ASM_COMPILER  ${GCC_DIR}/arm-${TARGET_ABI}-as         CACHE FILEPATH "assembler")
SET(CMAKE_LINKER        ${GCC_DIR}/arm-${TARGET_ABI}-ld         CACHE FILEPATH "linker")
SET(CMAKE_AR            ${GCC_DIR}/arm-${TARGET_ABI}-gcc-ar     CACHE FILEPATH "gcc-ar")
SET(CMAKE_NM            ${GCC_DIR}/arm-${TARGET_ABI}-gcc-nm     CACHE FILEPATH "gcc-nm")
SET(CMAKE_RANLIB        ${GCC_DIR}/arm-${TARGET_ABI}-gcc-ranlib CACHE FILEPATH "gcc-ranlib")
SET(CMAKE_OBJCOPY       ${GCC_DIR}/arm-${TARGET_ABI}-objcopy    CACHE FILEPATH "objcopy")
SET(CMAKE_OBJDUMP       ${GCC_DIR}/arm-${TARGET_ABI}-objdump    CACHE FILEPATH "objdump")
SET(CMAKE_STRIP         ${GCC_DIR}/arm-${TARGET_ABI}-strip      CACHE FILEPATH "strip")
SET(CMAKE_SIZE          ${GCC_DIR}/arm-${TARGET_ABI}-size       CACHE FILEPATH "size")
SET(CMAKE_STRINGS       ${GCC_DIR}/arm-${TARGET_ABI}-strings    CACHE FILEPATH "strings")

#SET(CMAKE_SYSTEM_VERSION 1)
#SET(CMAKE_TRY_COMPILE_TARGET_TYPE   STATIC_LIBRARY)

# compiler options
set(COMPILER_FLAGS "-Wall -mcpu=cortex-a72 -mtune=cortex-a72 -mfloat-abi=hard -mfpu=neon-fp-armv8")
set(VERBOSE "-v -Wl,--verbose")
set(CMAKE_C_FLAGS           "${COMPILER_FLAGS}" CACHE STRING    "c flags"           FORCE)
set(CMAKE_CXX_FLAGS         "${COMPILER_FLAGS}" CACHE STRING    "cpp flags"         FORCE)
set(CMAKE_C_FLAGS_RELEASE   "-O3 -DNDEBUG"      CACHE STRING    "c flags release"   FORCE)
set(CMAKE_CXX_FLAGS_RELEASE "-O0 -ggdb -DDEBUG" CACHE STRING    "cpp flags release" FORCE)
